services:
  kc-postgres:
    image: postgres:16.4
    restart: always
    ports:
      - "5434:5432"
    volumes:
      - kc-postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
      POSTGRES_DB: keycloak
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.6
    restart: always
    command: start-dev --import-realm --health-enabled=true
    volumes:
      - ./../keycloak:/opt/keycloak/data/import
    ports:
      - "9082:9082"
    environment:
      KC_LOG_LEVEL: DEBUG
      KC_HTTP_PORT: 9082
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: kc-postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: root
      KC_HEALTH_ENABLED: true
      KC_FEATURES: token-exchange,admin-fine-grained-authz
    healthcheck:
      test:
        [ "CMD-SHELL", "{ exec 3<>/dev/tcp/localhost/9000 && echo -e \"GET /health/ready HTTP/1.1\nhost: localhost:9000\n\" >&3 && timeout --preserve-status 1 cat <&3 | grep -m 1 -q 'status.*UP'; }" ]
      interval: 5s
      timeout: 5s
      start_period: 30s
      retries: 20
    depends_on:
      - kc-postgres

  # keycloak-init service initializes Keycloak users using a script.
  # The service will not restart after execution (restart: "no").
  # It depends on the Keycloak service being healthy before running.
  # YOU CAN REMOVE THIS CONTAINER IT AFTER FIRST START
  keycloak-init:
    image: curlimages/curl:latest
    restart: "no"
    volumes:
      - ./../keycloak/init_example_users.sh:/init_example_users.sh
    entrypoint: [ "sh", "/init_example_users.sh" ]
    depends_on:
      keycloak:
        condition: service_healthy
  keycloak-auth-service:
    image: keycloak-auth-service:latest
    build:
      context: ../.
      args:
        DOCKER_BUILDKIT: 1
    restart: always
    ports:
      - "8092:8092"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8092/actuator/health || exit 1
      interval: 30s
      timeout: 5s
      start_period: 30s
      retries: 5
    depends_on:
      - keycloak-init
    env_file: ../example.env
volumes:
  kc-postgres_data: